#!/usr/bin/env ruby
##############################################################################
# File::    submon.rb
# Purpose:: Subscription Monitoring Application
# 
# Author::    Jeff McAffee 11/08/2016
# Copyright:: Copyright (c) 2016, kTech Systems LLC. All rights reserved.
# Website::   http://ktechsystems.com
##############################################################################


require "bundler/setup"
require 'gamewisp'

$LOAD_PATH.unshift(File.expand_path("../../lib", __FILE__))
require "submon"

# Exit cleanly from early interrupt
Signal.trap("INT") { exit 1 }


class SubmonApp

  attr_reader :gw

  def initialize
    @gw = Gamewisp::Client.new
  end

  def execute
    puts "Renewing access token..."
    gw.renew_access_token

    puts "Getting subscribers..."
    response = gw.get_subscribers

    puts "---BEGIN-RESPONSE---"
    puts response
    puts "---END-RESPONSE---"

    # Pull usernames from spreadsheet.
    # Update users in DB.
    # Generate user list.
  end

  def execute_admin
    puts "Renewing access token..."
    gw.renew_access_token

    puts "Getting subscribers..."
    response = gw.get_subscribers

    puts "---BEGIN-RESPONSE---"
    puts response
    puts "---END-RESPONSE---"

    # Pull admin commands from spreadsheet.
    # Update users in DB.
  end

  def self.usage
puts <<USAGE
#{SubmonApp.version}
Usage: #{Submon::APPNAME} [command]

  When run with no command,
    - #{Submon::APPNAME} will pull a subscriber list from Gamewisp and update its DB.
    - Read usernames from a google spreadsheet and update DB.
    - Generate a list of Minecraft IGNs

    Commands:
      help      show this help
      version   display the app version
      init      setup and configure #{Submon::APPNAME}
      admin     run #{Submon::APPNAME} in admin mode

USAGE
  end

  def self.version
    "#{Submon::APPNAME} #{Submon::VERSION}"
  end
end

begin
  if ARGV.first == "-h" or ARGV.first == "--help" or ARGV.first == "help"
    SubmonApp.usage
  elsif ARGV.first == "--version" or ARGV.first == "version"
    puts SubmonApp.version
  elsif ARGV.first == "init"
    Submon::Setup.new.execute
  elsif ARGV.first == "admin"
    SubmonApp.new.execute_admin
  elsif !ARGV.first.nil?
    SubmonApp.usage
  else
    SubmonApp.new.execute
  end
rescue SystemExit

rescue Exception => e
  puts "An error occurred."
  puts "Please send the following information to support@ktechsystems.com:"
  puts
  puts Submon::APPNAME + " " + Submon::VERSION
  puts
  puts "I've fallen and I can't get up..."
  puts
  puts "\t" + e.message
  puts
  if Submon::VERSION.include?('alpha') ||
      Submon::VERSION.include?('beta') ||
      Submon::VERSION.include?('pre')
    puts "Exception type: #{e.class.to_s}"
    puts e.backtrace
  end
end

